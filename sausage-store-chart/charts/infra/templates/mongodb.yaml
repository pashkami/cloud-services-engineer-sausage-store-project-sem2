apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb

spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        envFrom:
          - configMapRef:
              name: mongodb-conf
        ports:
        - containerPort: {{ .Values.mongodb.containerPort }}
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  labels:
    app: mongodb
spec:
  ports:
  - port: {{ .Values.mongodb.containerPort }}
    targetPort: {{ .Values.mongodb.containerPort }}
  selector:
    app: mongodb
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-conf
data:
  MONGO_INITDB_ROOT_USERNAME: {{ .Values.mongodb.env.MONGO_INITDB_ROOT_USERNAME }}
  MONGO_INITDB_ROOT_PASSWORD: {{ .Values.mongodb.env.MONGO_INITDB_ROOT_PASSWORD }}

--- 

apiVersion: batch/v1
kind: Job
metadata:
  name: mongodb-init
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:    
    metadata:
      labels:
        app.kubernetes.io/name: mongodb-init
        app.kubernetes.io/instance: "{{ .Release.Name }}"
    spec:
      restartPolicy: OnFailure
      containers:
      - name: mongo-init
        image: mongo:7.0
        command:
          - "mongosh"
          - "--host"
          - "mongodb"
          - "-u"
          - "{{ .Values.mongodb.env.MONGO_INITDB_ROOT_USERNAME }}"
          - "-p"
          - "{{ .Values.mongodb.env.MONGO_INITDB_ROOT_PASSWORD }}"
          - "--authenticationDatabase"
          - "admin"
          - "--eval"
          - |
            db = db.getSiblingDB("sausage-store");
            db.createUser({
              user: "reports",
              pwd: "reportspassword",
              roles: [{ role: "readWrite", db: "sausage-store" }]
            });
        envFrom:
          - configMapRef:
              name: mongodb-conf
        resources:
          requests:
            memory: "100Mi"
            cpu: "100m"
          limits:
            memory: "200Mi"
            cpu: "200m"
